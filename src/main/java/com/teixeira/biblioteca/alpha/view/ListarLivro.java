package com.teixeira.biblioteca.alpha.view;

import com.opencsv.exceptions.CsvValidationException;
import com.teixeira.biblioteca.alpha.controller.LivroController;
import com.teixeira.biblioteca.alpha.dto.LivroDTO;
import com.teixeira.biblioteca.alpha.service.ArquivoService;
import com.teixeira.biblioteca.alpha.service.exception.ErroImportarArquivoCSVException;
import com.teixeira.biblioteca.alpha.service.exception.ErroImportarArquivoXMLException;
import com.teixeira.biblioteca.alpha.service.exception.LivroNaoEncontradoException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.TabExpander;

/**
 *
 * @author lucas
 */
public class ListarLivro extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(ListarLivro.class.getName());

    /**
     * Creates new form telaInicial
     */
    public ListarLivro() {
        initComponents();
        setTitle("Livros Cadastrados");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        btnAdicionarIsbn.addActionListener(e -> abrirTelaAdicionarLivroIsbn());
        btnEditarLivro.addActionListener(e -> editarLivro());
        btnExcluirLivro.addActionListener(e -> {
            try {
                excluirLivro();
            } catch (LivroNaoEncontradoException ex) {
                logger.log(Level.SEVERE, null, ex);
            }
        });
        btnAdicionarArquivo.addActionListener(e -> {
            try {
                adicionarArquivo();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao importar arquivo, entre em contato com o suporte.");
            } catch (CsvValidationException | ErroImportarArquivoCSVException | ErroImportarArquivoXMLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        });

        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            @Override
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                carregarLivrosNaTabela(); // Atualiza a tabela ao voltar o foco
            }

            @Override
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                // Não precisa fazer nada aqui
            }
        });
        
        //método pesquisar em todos os campos da tabela
        DefaultTableModel modelo = (DefaultTableModel) tblLivros.getModel();
        txtPesquisa.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filtrarTabela();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filtrarTabela();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filtrarTabela();
            }
            
            private void filtrarTabela() {
                String termo = txtPesquisa.getText().trim().toLowerCase();
                TableRowSorter<TableModel> sorter = new TableRowSorter<>(modelo);
                tblLivros.setRowSorter(sorter);
                
                if(termo.length() == 0) {
                    sorter.setRowFilter(null); //mostrar todos os dados
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + Pattern.quote(termo)));
                }
                
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPesquisa = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLivros = new javax.swing.JTable();
        btnEditarLivro = new javax.swing.JButton();
        btnExcluirLivro = new javax.swing.JButton();
        btnAdicionarIsbn = new javax.swing.JButton();
        btnAdicionarArquivo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Pesquisar Livros");

        tblLivros.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblLivros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Título", "Autores", "Data de Publicação", "ISBN", "Editora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblLivros);

        btnEditarLivro.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEditarLivro.setText("Editar Livro");

        btnExcluirLivro.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnExcluirLivro.setText("Excluir Livro");

        btnAdicionarIsbn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAdicionarIsbn.setText("Adicionar Livro Por ISBN");

        btnAdicionarArquivo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAdicionarArquivo.setText("Adicionar Livro Por Arquivo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAdicionarIsbn)
                                .addGap(18, 18, 18)
                                .addComponent(btnAdicionarArquivo)
                                .addGap(18, 18, 18)
                                .addComponent(btnEditarLivro)
                                .addGap(18, 18, 18)
                                .addComponent(btnExcluirLivro))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditarLivro)
                    .addComponent(btnExcluirLivro)
                    .addComponent(btnAdicionarIsbn)
                    .addComponent(btnAdicionarArquivo))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new ListarLivro().setVisible(true));
    }

    public void carregarLivrosNaTabela() {
        LivroController livroController = new LivroController();
        List<LivroDTO> livros = livroController.obterLivros();

        DefaultTableModel model = (DefaultTableModel) tblLivros.getModel();

        model.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

        for (LivroDTO livro : livros) {
            model.addRow(new Object[]{
                livro.getTitulo(),
                livro.getAutores(),
                livro.getDataPublicacao(),
                livro.getIsbn(),
                livro.getEditora()
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarArquivo;
    private javax.swing.JButton btnAdicionarIsbn;
    private javax.swing.JButton btnEditarLivro;
    private javax.swing.JButton btnExcluirLivro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblLivros;
    private javax.swing.JTextField txtPesquisa;
    // End of variables declaration//GEN-END:variables

    private void abrirTelaAdicionarLivroIsbn() {
        new AdicionarLivroISBN().setVisible(true);
    }

    private void editarLivro() {
        int selectedRow = tblLivros.getSelectedRow();

        if (selectedRow != -1) {
            LivroDTO livroSelecionado = new LivroDTO(
                    (String) tblLivros.getValueAt(selectedRow, 0),
                    (String) tblLivros.getValueAt(selectedRow, 1),
                    (String) tblLivros.getValueAt(selectedRow, 2),
                    (String) tblLivros.getValueAt(selectedRow, 3),
                    (String) tblLivros.getValueAt(selectedRow, 4)
            );

            new EditarLivro(livroSelecionado).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um livro para editar.");
        }
    }

    private void excluirLivro() throws LivroNaoEncontradoException {
        int selectedRow = tblLivros.getSelectedRow(); // Obtém a linha selecionada

        if (selectedRow != -1) { // Verifica se uma linha está selecionada
            String titulo = (String) tblLivros.getValueAt(selectedRow, 0);
            int resposta = JOptionPane.showConfirmDialog(this,
                    "Tem certeza que deseja '" + titulo + "' da base de dados?",
                    "Confirmação de Exclusão",
                    JOptionPane.YES_NO_OPTION);

            if (resposta == JOptionPane.YES_OPTION) { // Se o usuário confirmar
                String isbn = (String) tblLivros.getValueAt(selectedRow, 3); // ISBN na 4ª coluna
                LivroController livroController = new LivroController();

                livroController.excluirLivro(isbn);

                // Remove a linha da tabela
                DefaultTableModel model = (DefaultTableModel) tblLivros.getModel();
                model.removeRow(selectedRow);

                JOptionPane.showMessageDialog(this, "Livro excluído com sucesso!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um livro para excluir.");
        }
    }

    private void adicionarArquivo() throws IOException, FileNotFoundException, CsvValidationException, ErroImportarArquivoCSVException, ErroImportarArquivoXMLException {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecione um arquivo de Livros");

        int resultado = fileChooser.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File arquivoSelecionado = fileChooser.getSelectedFile();

            if (arquivoSelecionado.getName().endsWith(".csv") || arquivoSelecionado.getName().endsWith(".xml")) {
                ArquivoService service = new ArquivoService();
                service.processarArquivo(arquivoSelecionado);
                JOptionPane.showMessageDialog(this, "Livros adicionados com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "<html>Por favor, selecione um arquivo válido.<br>São aceitos apenas arquivos do tipo .csv ou .xml.</html>");
            }
        }
    }

}
